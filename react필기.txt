React.js 특징
 1.virtual DOM

React.js 장점
 -virtual DOM
 -배우기 간단하다(??)=>component를 이용
 -뛰어난 gabage collention, 메모리관리, 성능
 -서버&클라이언트 렌더링 동시지원
 -간편한 UI수정 및 재사용
 -페이스북이 밀어준다(????)
 -다른 프레임워크+라이브러리와 혼용가능

React.js 단점
 -View only...
 -IE8이하 지원X


-------------------------------
render() 
 : 컴포넌트가 어떻게 생길지(화면구성인가..)를 정의해주는 메소드

JSX
 : XML-like syntax 를 native javaScript로 변경해줌
	=> " "로 감싸지 않는다.
	=> ( )룰 사용하지 않아도 오류 발생하지 않지만.. 킹치만... 가독성을 위해 사용하는 것을 권장.
-특징
     1.Nested Element
	:모든 JSX컨텐츠는 container element안에 포함되어야한다.
     2. JavaScript Expression
	:JSX안에서 JavaScript를 표현할때는 {}(브라켓)안에 기입하면 된다. 그러나 If Else문은 JSX에서 사용이 불가능 => 대안으로 삼항연산자
     3.Inline Style
	:JSX 안에서 style을 설정할 때는, String 형식을 사용하지 않고 key가 camelCase(첫글자는 소문자, 나머지 단어의 첫글자는 대문자)인 객체가 사용됨.
	:JSX안에서 class를 설정할 때는 class=가 아닌 className=으로 사용하자.
     4.Comments
	:JSX안에서 주석을 사용할 때는 {/*....*/} (*브라켓으로 감싸는거 중요!!)

props
     -컴포넌트 내부의 Immutable Data(변하지 않는 데이터)
     -JSX 내부에 { this.props.propsName }
     -컴포넌트를 사용 할 때, < > 괄호 안에 propsName="value"
     -this.props.children 은 기본적으로 갖고있는 props로서, <Cpnt>여기에 있는 값이 들어간다.</Cpnt>

-기본 값 설정
	class App extends React.Component {
	    render() {
	        return (
	            <div>{this.props.value}</div>
	        );
	    }
	};

	App.defaultProps = {
	    value: 0
	};

-Type 검증
	class App extends React.Component {
	    render() {
	        return (
	            <div>
	                 {this.props.value}
	                 {this.props.secondValue}
	                 {this.props.thirdValue}
	            </div>
	        );
	    }
	};

	App.propTypes = {
	    value: React.PropTypes.string,
	    secondValue: React.PropType.number,
	    thirdValue: React.PropTypes.any.isRequired
	};
	Component.propTypes = { ... }

		참고: https://facebook.github.io/react/docs/reusable-components.html

state
-유동적인 데이터
-JSX 내부에 { this.state.stateName }
-초기값 설정이 필수, 생성자(constructor) 에서
-this.state = { } 으로 설정
-값을 수정 할 때에는 this.setState({ val: 'new_val' }), 렌더링 된 다음엔 this.state = 절대 사용하지 말것

map() : map() 메소드는 파라미터로 전달 된 함수를 통하여 배열 내의 각 요소를 처리해서 그 결과로 새로운 배열을 생성합니다.

- arr.map(callback, [thisArg])
      callback 새로운 배열의 요소를 생성하는 함수로서, 다음 세가지 인수를 가집니다.
      currentValue 현재 처리되고 있는 요소
      index 현재 처리되고 있는 요소의 index 값
      array 메소드가 불려진 배열
      thisArg (선택항목) callback 함수 내부에서 사용 할 this 값을 설정

-------------------------------------------------------------------------
*React.js 실행환경 설정(for Windows)

-Global Dependency 설치
     (cmd 창에서)
     npm install -g webpack webpack-dev-server

     -webpack: 브라우저 위에서 import(require) 를 할 수 있게 해주고 자바스크립트 파일들을 하나로 합쳐줍니다
     -webpack-dev-server: 별도의 서버를 구축하지 않고도 static 파일을 다루는 웹서버를 열 수 있으며,
      hot-loader 를 통하여 코드가 수정 될 때마다 자동으로 리로드 되게 할 수 있습니다.

-프로젝트 생성
 : 작업공간을 설정한뒤 주소창을 복사 붙여넣기-> cmd창에서 cd (설정주소를 복사)->npm init

-Dependency 및 Plugin 설치 

     React 설치
     : npm install --save react react-dom

     개발 의존  모듈 설치 :
     npm install --save-dev react-hot-loader webpack webpack-dev-server
     npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react 
===================================
-webpack 설정
=>webpack/config.js

var webpack = require('webpack');

module.exports = {
    entry: './src/index.js',

    output: {
        path: __dirname + '/public/',
        filename: 'bundle.js'
    },

    devServer: {
        hot: true,
        inline: true,
        host: '0.0.0.0',
        port: 4000,
        contentBase: __dirname + '/public/',
    },

    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
                query: {
                    cacheDirectory: true,
                    presets: ['es2015', 'react']
                }
            }
        ]
    },

    plugins: [
        new webpack.HotModuleReplacementPlugin()
    ]
};
======================================
HTML 및 JS 작성
/src/components/App.js

import React from 'react';
 
class App extends React.Component {
    render(){
 
        return (
                <h1>Hello React Skeleton</h1>
        );
    }
}
 
export default App;


/src/index.js 작성

import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/App';
 
const rootElement = document.getElementById('root');
ReactDOM.render(<App />, rootElement);
=======================
React는 변경된 부분이 있으면 페이지 로딩 없이 회면에 변경한 것을 출력 할 수 있다.(맞나...)그러나 특별한 설정이 없으면
리로딩 될시 localState값(변경된 값이 아닌데도)이 사라진다. 그것을 방지하기 위해 React-hot-loader를 설정해야 한다.

React-hot-loader 설정

webpack.config.js에서
  module: {
        rules: [
            {
                test: /\.js$/,
                loaders:['react-hot-loader/webpack','babel-loader?'+JSON.stringify({
                        cacheDirectory: true,
                        presets: ['es2015', 'react']
                    })],
                exclude: /node_modules/,  
            }
        ]

state 내부 배열처리 
 1. this.setState({
          list: this.state.list.concat(newObj)
    })
 2. Immutablilty helper (immutable.js)

원소 추가
this.setState({
    list: update(
              this.state.list, ->처리해야할 객체나 배열
              {
                  $push: [newObj, newObj2] ->처리 명령을 갖고있는 객체.객체 하나를 추가하더라도 배열형태로 감싸야함.
              }
});

원소 제거
this.setState({
    list: update(
              this.state.list, 
              {
                  $splice: [[index, n]] ->index아이템부터 n개의 아이템을 제거. 이것을 감싸고 있는 배열을 다시 배열형태로 감쌈.
              }
});

원소 수정
this.setState({
    list: update(
              this.state.list, 
              {
                  [index]: {
                      field: { $set: "value" },
                      field2: { $set: "value2" }
                  }
              }
});
=====================
ref

-outdated usage(구식...)
class Hello extends React.Component {
    render() {
        return (
          <div> 
            <input ref="myInput">
            </input>
          </div>
        )
    }
  
    componentDidMount() {
      this.refs.myInput.value = "Hi, I used ref to do this";
    }
}
 
ReactDOM.render(
  <Hello/>,
  document.getElementById('app')
);

-CURRENT (use callback function)
class Hello extends React.Component {
  render() {
   return (
       <div> 
           <input ref={(ref) => { this.input = ref} }> //callback function
            </input>
          </div>
        )
  }
  
  componentDidMount() {
   this.input.value = "I used ref to do this";
  }
  
}
ReactDOM.render(
  <Hello/>,
  document.getElementById('app')
);
================================================
-constructor
: 컴포넌트가 처음 만들어질 때 실행 된다. 기본 state 를 설정 할 수 있다.

-componentWillMount
: 컴포넌트가 DOM 위에 만들어지기 전에 실행된다.

-componentDidMount
: 첫 렌더링 마치고 실행된다. 이 안에서 다른 자바스크립트 프레임워크 연동 및 setTimeout, setInterval 및 AJAX 사용.

-componentWillReceiveProps
: props를 받을 때 실행된다. props 에 따라 state 를 업데이트 할 때 사용하면 유용하다. 이 안에서 setState를 해도 괜찮다.

- shouldComponentUpdate
: props/state 가 변경되었을 때 리렌더링을 할지말지 정한다. 실제로 사용 할 때 는 필요한 비교를 하고 값을 반환해야 한다.
 ex) return nextProps.id !== this.props.id
JSON.stringify 를 사용하여 여러 field 를 편하게 비교

-componentWillUpdate
: 컴포넌트 업데이트 전 실행된다. 여기서 setState 절대 사용하지 말 것.

-componentDidUpdate
: 컴포넌트가 리렌더링을 마친 후 실행된다. 여기서도 setState 사용 하지 말 것.

-componentWillUnmount
: 컴포넌트가 DOM 에서 사라진 후 실행된다.
=============================
-localStorage 
: HTML5 부터 지원되는 저장공간. Cookie와 유사하나 용량이 25.~5MB정도로 쿠키보다 월등히 크다. text형태로만 저장한다.
 그래서 JSON.stringify()로 텍스트로 변환한 뒤, 불러올때 JSON.parse()로 다시 변환한다.
===============================
Redux 
: 페이스북에서 제공하는 Flux 아키텍처를 구현할 라이브러리. 컴포넌트끼리 데이터 교류,state관리를 도와주는 라이브러리.

*디자인 패턴 비교*
MVC
Action - > Controller -> Model <->View
=>다수의 Model &View가 존재하면 무한루프에 빠질 가능성이 크다.

Flux
Action -> Dispatcher -> Store -> View
	      ↑		         ↓
	      └ ←   Action    ←   ┘	
Dispatcher 는 작업이 중첩되지 않도록함.

-Store가 하는일 
	1. dispatch(action): action을 reducer로 보냄. 실행시 Store는 현재 자신의 상태와 action을 reducer로 보냄. reducer는 필요한 부분에 변화를 주고, 
			새로운 상태를 받으면 현 상태에 교체 해둠   
	2. getState(): 현재 상태를 반환하는 함수.
	3. subscribe(listener): 상태가 바뀔때 마다 실행할 함수를 등록하는 것. 	
	4.replaceReducer(nextReducer): Hot-reloading 과 코드분할을 구현할때 사용하는 것.

- react-redux: 뷰 레이어 바인딩 도구
	1.Provider : 컴포넌트에서 redux를 사용할 수 있도록 제공해 주는것.
	2.connect([...options]) : 컴포넌트를 REDUX에 연결하는 함수를 반환. store에 연결된 새로운 컴포넌트 클래스가 반환됨
			     옵션이 없으면 this.props.store로 접근 가능.
				connect(
					[mapStateToProps], ->state를 인수로 가진 함수. state를 해당 컴포넌트의 props로 연결해줌.
					[mapDispatchToProps], -> dispatch를 인수로 가진 함수. dispatch 한 함수를 props로 연결해줌.
					[mergeProps], ->state와 dispatch를 인수로 가진 함수. 둘다 모두 사용하는 컴포넌트에 props로 연결해줌.
					[options]->객체형태. pure(true)와 withRef(false)형태가 있음. true로 되어있으면 불필요한 업데이트X.
				          );
=========================
*미들웨어(Middleware)
-정의
  : 미들웨어 함수는 요청 오브젝트 (req), 응답 오브젝트 (res),
  그리고 애플리케이션의 요청-응답 주기 중 그 다음의 미들웨어 함수 대한 액세스 권한을 갖는 함수입니다.

-미들웨어 직접 만들기 (in main.js)
var myLogger = function (req, res, next) {
  console.log(req.url);
  next();
};

app.use(myLogger);

NPM 으로 미들웨어 설치
: npm install --save morgan body-parser
morgan: 로깅 미들웨어
body-parser: JSON 형태 데이터 파싱
